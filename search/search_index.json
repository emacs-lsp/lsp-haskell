{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lsp-haskell","text":"<p>An Emacs Lisp library for interacting with a Haskell language server such as <code>haskell-language-server</code> using Microsoft's Language Server Protocol.</p> <p>The library acts as a client for <code>lsp-mode</code>.</p>"},{"location":"#functionality","title":"Functionality","text":"<p>This main functionality of <code>lsp-haskell</code> is: - Finding and launching the <code>haskell-language-server</code> binary - Providing configuration options to <code>haskell-language-server</code></p> <p>If you would like to know about how LSP functionality is provided in Emacs and how to use it, please consult <code>lsp-mode</code>. If you would like to know about the LSP functionality which is provided by the Haskell language server, please consult <code>haskell-language-server</code>.</p>"},{"location":"#installation","title":"Installation","text":"<p>Follow the <code>lsp-mode</code> installation instructions. Do not skip this! It has important information.</p> <p><code>lsp-mode</code> automatically requires the <code>lsp-haskell</code> package , so you do not need to <code>require</code> <code>lsp-haskell</code> unless you like being explicit.</p> <p>You will need to set some hooks to ensure that <code>lsp-mode</code> is triggered when your Haskell major mode (e.g., <code>haskell-mode</code> or <code>haskell-ts-mode</code>) is entered.</p> <pre><code>(add-hook 'haskell-mode-hook #'lsp)\n(add-hook 'haskell-literate-mode-hook #'lsp)\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>HLS has some configuration you can modify using either the <code>lsp-haskell</code> or <code>lsp</code> customization groups:</p> <pre><code>(customize-group 'lsp-haskell)\n\n; or\n\n(customize-group 'lsp)\n</code></pre> <p>If you want to modify some configuration that this project doesn't support yet you can customize things explicitly yourself using <code>lsp--set-configuration</code>. For example:</p> <pre><code>(add-hook 'lsp-after-initialize-hook\n          '(lambda ()\n             (lsp--set-configuration\n              '(:haskell (:plugin (:tactics (:config (:timeout_duration 5)))))\n              )))\n</code></pre>"},{"location":"#language-server-installation","title":"Language server installation","text":"<p>Follow the instructions on the <code>haskell-language-server</code> repositories to install the server binaries.</p> <p>If you have installed the binaries to a location that is not on your <code>PATH</code>, or you are not using the <code>haskell-language-server-wrapper</code>, then you will need to customize the <code>lsp-haskell-server-path</code> variable to point to the executable you want to launch.</p>"},{"location":"#server-configuration","title":"Server configuration","text":"<p><code>lsp-haskell</code> provides a few options for for setting the server executable and arguments, and numerous settings for configuring the server itself (<code>hlint</code>, choice of formatting provider, etc.).</p> <p>Note that server configuration settings will currently not be applied until the server is restarted.</p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p><code>lsp-haskell</code> is just the glue between <code>lsp-mode</code> and <code>haskell-language-server</code>.</p> <p>If you have an issue with Emacs, it is probably a <code>lsp-mode</code> issue. If you have an issue with the Haskell functionality itself, it is probably a <code>haskell-language-server</code> issue. If you have an issue specifically with how the two are joined together, then it belongs here!</p> <p>If you're not sure what the problem is, the <code>haskell-language-server</code> README provides some troubleshooting instructions.</p>"}]}